//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GCISApp.WSGCIS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Data", Namespace="http://schemas.datacontract.org/2004/07/WCFGCIS")]
    [System.SerializableAttribute()]
    public partial class Data : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Data.DataTable TablaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Data.DataTable Tabla {
            get {
                return this.TablaField;
            }
            set {
                if ((object.ReferenceEquals(this.TablaField, value) != true)) {
                    this.TablaField = value;
                    this.RaisePropertyChanged("Tabla");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSGCIS.IGCIS")]
    public interface IGCIS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertSolucion", ReplyAction="http://tempuri.org/IGCIS/InsertSolucionResponse")]
        bool InsertSolucion(string Solucion, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertSolucion", ReplyAction="http://tempuri.org/IGCIS/InsertSolucionResponse")]
        System.Threading.Tasks.Task<bool> InsertSolucionAsync(string Solucion, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateSolucion", ReplyAction="http://tempuri.org/IGCIS/UpdateSolucionResponse")]
        bool UpdateSolucion(int IDSolucion, string Solucion, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateSolucion", ReplyAction="http://tempuri.org/IGCIS/UpdateSolucionResponse")]
        System.Threading.Tasks.Task<bool> UpdateSolucionAsync(int IDSolucion, string Solucion, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteSolucion", ReplyAction="http://tempuri.org/IGCIS/DeleteSolucionResponse")]
        bool DeleteSolucion(int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteSolucion", ReplyAction="http://tempuri.org/IGCIS/DeleteSolucionResponse")]
        System.Threading.Tasks.Task<bool> DeleteSolucionAsync(int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectStatus", ReplyAction="http://tempuri.org/IGCIS/SelectStatusResponse")]
        GCISApp.WSGCIS.Data SelectStatus(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectStatus", ReplyAction="http://tempuri.org/IGCIS/SelectStatusResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectStatusAsync(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertStatus", ReplyAction="http://tempuri.org/IGCIS/InsertStatusResponse")]
        bool InsertStatus(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertStatus", ReplyAction="http://tempuri.org/IGCIS/InsertStatusResponse")]
        System.Threading.Tasks.Task<bool> InsertStatusAsync(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateStatus", ReplyAction="http://tempuri.org/IGCIS/UpdateStatusResponse")]
        bool UpdateStatus(int ID, string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateStatus", ReplyAction="http://tempuri.org/IGCIS/UpdateStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateStatusAsync(int ID, string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteStatus", ReplyAction="http://tempuri.org/IGCIS/DeleteStatusResponse")]
        bool DeleteStatus(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteStatus", ReplyAction="http://tempuri.org/IGCIS/DeleteStatusResponse")]
        System.Threading.Tasks.Task<bool> DeleteStatusAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectTipo", ReplyAction="http://tempuri.org/IGCIS/SelectTipoResponse")]
        GCISApp.WSGCIS.Data SelectTipo(string Tipo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectTipo", ReplyAction="http://tempuri.org/IGCIS/SelectTipoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectTipoAsync(string Tipo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertTipo", ReplyAction="http://tempuri.org/IGCIS/InsertTipoResponse")]
        bool InsertTipo(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertTipo", ReplyAction="http://tempuri.org/IGCIS/InsertTipoResponse")]
        System.Threading.Tasks.Task<bool> InsertTipoAsync(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateTipo", ReplyAction="http://tempuri.org/IGCIS/UpdateTipoResponse")]
        bool UpdateTipo(int ID, string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateTipo", ReplyAction="http://tempuri.org/IGCIS/UpdateTipoResponse")]
        System.Threading.Tasks.Task<bool> UpdateTipoAsync(int ID, string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteTipo", ReplyAction="http://tempuri.org/IGCIS/DeleteTipoResponse")]
        bool DeleteTipo(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteTipo", ReplyAction="http://tempuri.org/IGCIS/DeleteTipoResponse")]
        System.Threading.Tasks.Task<bool> DeleteTipoAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/SelectUrlAdministracionSANResponse")]
        GCISApp.WSGCIS.Data SelectUrlAdministracionSAN(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/SelectUrlAdministracionSANResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUrlAdministracionSANAsync(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/InsertUrlAdministracionSANResponse")]
        bool InsertUrlAdministracionSAN(int IDSan, string Url, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/InsertUrlAdministracionSANResponse")]
        System.Threading.Tasks.Task<bool> InsertUrlAdministracionSANAsync(int IDSan, string Url, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/UpdateUrlAdministracionSANResponse")]
        bool UpdateUrlAdministracionSAN(int IDUrl, int IDSan, string Url, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/UpdateUrlAdministracionSANResponse")]
        System.Threading.Tasks.Task<bool> UpdateUrlAdministracionSANAsync(int IDUrl, int IDSan, string Url, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/DeleteUrlAdministracionSANResponse")]
        bool DeleteUrlAdministracionSAN(int IDUrl, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUrlAdministracionSAN", ReplyAction="http://tempuri.org/IGCIS/DeleteUrlAdministracionSANResponse")]
        System.Threading.Tasks.Task<bool> DeleteUrlAdministracionSANAsync(int IDUrl, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuarioIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioIDServerResponse")]
        GCISApp.WSGCIS.Data SelectUsuarioIDServer(int IDServidor, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuarioIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioIDServerResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioIDServerAsync(int IDServidor, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuario", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioResponse")]
        GCISApp.WSGCIS.Data SelectUsuario(string Usuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuario", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioAsync(string Usuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUsuario", ReplyAction="http://tempuri.org/IGCIS/InsertUsuarioResponse")]
        bool InsertUsuario(int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUsuario", ReplyAction="http://tempuri.org/IGCIS/InsertUsuarioResponse")]
        System.Threading.Tasks.Task<bool> InsertUsuarioAsync(int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUsuario", ReplyAction="http://tempuri.org/IGCIS/UpdateUsuarioResponse")]
        bool UpdateUsuario(int IDUsuario, int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUsuario", ReplyAction="http://tempuri.org/IGCIS/UpdateUsuarioResponse")]
        System.Threading.Tasks.Task<bool> UpdateUsuarioAsync(int IDUsuario, int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUsuario", ReplyAction="http://tempuri.org/IGCIS/DeleteUsuarioResponse")]
        bool DeleteUsuario(int IDUsuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUsuario", ReplyAction="http://tempuri.org/IGCIS/DeleteUsuarioResponse")]
        System.Threading.Tasks.Task<bool> DeleteUsuarioAsync(int IDUsuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioInstanciaResponse")]
        GCISApp.WSGCIS.Data SelectUsuarioInstancia(string InstanciaAplicacion, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioInstanciaResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioInstanciaAsync(string InstanciaAplicacion, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/InsertUsuarioInstanciaResponse")]
        bool InsertUsuarioInstancia(int IDInstancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/InsertUsuarioInstanciaResponse")]
        System.Threading.Tasks.Task<bool> InsertUsuarioInstanciaAsync(int IDInstancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/UpdateUsuarioInstanciaResponse")]
        bool UpdateUsuarioInstancia(int IDUsuario, int IDInstancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/UpdateUsuarioInstanciaResponse")]
        System.Threading.Tasks.Task<bool> UpdateUsuarioInstanciaAsync(int IDUsuario, int IDInstancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/DeleteUsuarioInstanciaResponse")]
        bool DeleteUsuarioInstancia(int IDUsuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUsuarioInstancia", ReplyAction="http://tempuri.org/IGCIS/DeleteUsuarioInstanciaResponse")]
        System.Threading.Tasks.Task<bool> DeleteUsuarioInstanciaAsync(int IDUsuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioSANResponse")]
        GCISApp.WSGCIS.Data SelectUsuarioSAN(string San, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/SelectUsuarioSANResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioSANAsync(string San, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/InsertUsuarioSANResponse")]
        bool InsertUsuarioSAN(int IDSan, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/InsertUsuarioSANResponse")]
        System.Threading.Tasks.Task<bool> InsertUsuarioSANAsync(int IDSan, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/UpdateUsuarioSANResponse")]
        bool UpdateUsuarioSAN(int IDUsuario, int IDSan, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/UpdateUsuarioSANResponse")]
        System.Threading.Tasks.Task<bool> UpdateUsuarioSANAsync(int IDUsuario, int IDSan, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/DeleteUsuarioSANResponse")]
        bool DeleteUsuarioSAN(int IDUsuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteUsuarioSAN", ReplyAction="http://tempuri.org/IGCIS/DeleteUsuarioSANResponse")]
        System.Threading.Tasks.Task<bool> DeleteUsuarioSANAsync(int IDUsuario, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectWebServiceIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectWebServiceIDServerResponse")]
        GCISApp.WSGCIS.Data SelectWebServiceIDServer(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectWebServiceIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectWebServiceIDServerResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectWebServiceIDServerAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectWebService", ReplyAction="http://tempuri.org/IGCIS/SelectWebServiceResponse")]
        GCISApp.WSGCIS.Data SelectWebService(string NombreWebService, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectWebService", ReplyAction="http://tempuri.org/IGCIS/SelectWebServiceResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectWebServiceAsync(string NombreWebService, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertWebService", ReplyAction="http://tempuri.org/IGCIS/InsertWebServiceResponse")]
        bool InsertWebService(int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertWebService", ReplyAction="http://tempuri.org/IGCIS/InsertWebServiceResponse")]
        System.Threading.Tasks.Task<bool> InsertWebServiceAsync(int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateWebService", ReplyAction="http://tempuri.org/IGCIS/UpdateWebServiceResponse")]
        bool UpdateWebService(int IDWebService, int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateWebService", ReplyAction="http://tempuri.org/IGCIS/UpdateWebServiceResponse")]
        System.Threading.Tasks.Task<bool> UpdateWebServiceAsync(int IDWebService, int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteWebService", ReplyAction="http://tempuri.org/IGCIS/DeleteWebServiceResponse")]
        bool DeleteWebService(int IDWebService, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteWebService", ReplyAction="http://tempuri.org/IGCIS/DeleteWebServiceResponse")]
        System.Threading.Tasks.Task<bool> DeleteWebServiceAsync(int IDWebService, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPermisosUsuarios", ReplyAction="http://tempuri.org/IGCIS/SelectPermisosUsuariosResponse")]
        GCISApp.WSGCIS.Data SelectPermisosUsuarios(string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPermisosUsuarios", ReplyAction="http://tempuri.org/IGCIS/SelectPermisosUsuariosResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPermisosUsuariosAsync(string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectAcceso", ReplyAction="http://tempuri.org/IGCIS/SelectAccesoResponse")]
        GCISApp.WSGCIS.Data SelectAcceso(string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectAcceso", ReplyAction="http://tempuri.org/IGCIS/SelectAccesoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectAccesoAsync(string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectAmbiente", ReplyAction="http://tempuri.org/IGCIS/SelectAmbienteResponse")]
        GCISApp.WSGCIS.Data SelectAmbiente(string Ambiente, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectAmbiente", ReplyAction="http://tempuri.org/IGCIS/SelectAmbienteResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectAmbienteAsync(string Ambiente, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertAmbiente", ReplyAction="http://tempuri.org/IGCIS/InsertAmbienteResponse")]
        bool InsertAmbiente(string Ambiente, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertAmbiente", ReplyAction="http://tempuri.org/IGCIS/InsertAmbienteResponse")]
        System.Threading.Tasks.Task<bool> InsertAmbienteAsync(string Ambiente, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateAmbiente", ReplyAction="http://tempuri.org/IGCIS/UpdateAmbienteResponse")]
        bool UpdateAmbiente(int ID, string Ambiente, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateAmbiente", ReplyAction="http://tempuri.org/IGCIS/UpdateAmbienteResponse")]
        System.Threading.Tasks.Task<bool> UpdateAmbienteAsync(int ID, string Ambiente, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteAmbiente", ReplyAction="http://tempuri.org/IGCIS/DeleteAmbienteResponse")]
        bool DeleteAmbiente(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteAmbiente", ReplyAction="http://tempuri.org/IGCIS/DeleteAmbienteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAmbienteAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectAplicacion", ReplyAction="http://tempuri.org/IGCIS/SelectAplicacionResponse")]
        GCISApp.WSGCIS.Data SelectAplicacion(int Proveedor, string Aplicacion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectAplicacion", ReplyAction="http://tempuri.org/IGCIS/SelectAplicacionResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectAplicacionAsync(int Proveedor, string Aplicacion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertAplicacion", ReplyAction="http://tempuri.org/IGCIS/InsertAplicacionResponse")]
        bool InsertAplicacion(string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertAplicacion", ReplyAction="http://tempuri.org/IGCIS/InsertAplicacionResponse")]
        System.Threading.Tasks.Task<bool> InsertAplicacionAsync(string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateAplicacion", ReplyAction="http://tempuri.org/IGCIS/UpdateAplicacionResponse")]
        bool UpdateAplicacion(int ID, string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateAplicacion", ReplyAction="http://tempuri.org/IGCIS/UpdateAplicacionResponse")]
        System.Threading.Tasks.Task<bool> UpdateAplicacionAsync(int ID, string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteAplicacion", ReplyAction="http://tempuri.org/IGCIS/DeleteAplicacionResponse")]
        bool DeleteAplicacion(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteAplicacion", ReplyAction="http://tempuri.org/IGCIS/DeleteAplicacionResponse")]
        System.Threading.Tasks.Task<bool> DeleteAplicacionAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectBackupExecJobsIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectBackupExecJobsIDServerResponse")]
        GCISApp.WSGCIS.Data SelectBackupExecJobsIDServer(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectBackupExecJobsIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectBackupExecJobsIDServerResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectBackupExecJobsIDServerAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/SelectBackupExecJobsResponse")]
        GCISApp.WSGCIS.Data SelectBackupExecJobs(string BackupJob, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/SelectBackupExecJobsResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectBackupExecJobsAsync(string BackupJob, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/InsertBackupExecJobsResponse")]
        bool InsertBackupExecJobs(int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/InsertBackupExecJobsResponse")]
        System.Threading.Tasks.Task<bool> InsertBackupExecJobsAsync(int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/UpdateBackupExecJobsResponse")]
        bool UpdateBackupExecJobs(int ID, int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/UpdateBackupExecJobsResponse")]
        System.Threading.Tasks.Task<bool> UpdateBackupExecJobsAsync(int ID, int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/DeleteBackupExecJobsResponse")]
        bool DeleteBackupExecJobs(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteBackupExecJobs", ReplyAction="http://tempuri.org/IGCIS/DeleteBackupExecJobsResponse")]
        System.Threading.Tasks.Task<bool> DeleteBackupExecJobsAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectCluster", ReplyAction="http://tempuri.org/IGCIS/SelectClusterResponse")]
        GCISApp.WSGCIS.Data SelectCluster(string Cluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectCluster", ReplyAction="http://tempuri.org/IGCIS/SelectClusterResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectClusterAsync(string Cluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertCluster", ReplyAction="http://tempuri.org/IGCIS/InsertClusterResponse")]
        bool InsertCluster(string Cluster, string Descripcion, int IDAplicacion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertCluster", ReplyAction="http://tempuri.org/IGCIS/InsertClusterResponse")]
        System.Threading.Tasks.Task<bool> InsertClusterAsync(string Cluster, string Descripcion, int IDAplicacion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateCluster", ReplyAction="http://tempuri.org/IGCIS/UpdateClusterResponse")]
        bool UpdateCluster(int IDCluster, string Cluster, string Descripcion, int IDAplicacion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateCluster", ReplyAction="http://tempuri.org/IGCIS/UpdateClusterResponse")]
        System.Threading.Tasks.Task<bool> UpdateClusterAsync(int IDCluster, string Cluster, string Descripcion, int IDAplicacion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteCluster", ReplyAction="http://tempuri.org/IGCIS/DeleteClusterResponse")]
        bool DeleteCluster(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteCluster", ReplyAction="http://tempuri.org/IGCIS/DeleteClusterResponse")]
        System.Threading.Tasks.Task<bool> DeleteClusterAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/SelectClusterServidorFisicoResponse")]
        GCISApp.WSGCIS.Data SelectClusterServidorFisico(string Cluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/SelectClusterServidorFisicoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectClusterServidorFisicoAsync(string Cluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/InsertClusterServidorFisicoResponse")]
        bool InsertClusterServidorFisico(int IDServidorFisico, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/InsertClusterServidorFisicoResponse")]
        System.Threading.Tasks.Task<bool> InsertClusterServidorFisicoAsync(int IDServidorFisico, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/UpdateClusterServidorFisicoResponse")]
        bool UpdateClusterServidorFisico(int IDServidorFisico, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/UpdateClusterServidorFisicoResponse")]
        System.Threading.Tasks.Task<bool> UpdateClusterServidorFisicoAsync(int IDServidorFisico, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/DeleteClusterServidorFisicoResponse")]
        bool DeleteClusterServidorFisico(int IDServidorFisico, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteClusterServidorFisico", ReplyAction="http://tempuri.org/IGCIS/DeleteClusterServidorFisicoResponse")]
        System.Threading.Tasks.Task<bool> DeleteClusterServidorFisicoAsync(int IDServidorFisico, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectContacto", ReplyAction="http://tempuri.org/IGCIS/SelectContactoResponse")]
        GCISApp.WSGCIS.Data SelectContacto(int Proveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectContacto", ReplyAction="http://tempuri.org/IGCIS/SelectContactoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectContactoAsync(int Proveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertContacto", ReplyAction="http://tempuri.org/IGCIS/InsertContactoResponse")]
        bool InsertContacto(int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertContacto", ReplyAction="http://tempuri.org/IGCIS/InsertContactoResponse")]
        System.Threading.Tasks.Task<bool> InsertContactoAsync(int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateContacto", ReplyAction="http://tempuri.org/IGCIS/UpdateContactoResponse")]
        bool UpdateContacto(int ID, int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateContacto", ReplyAction="http://tempuri.org/IGCIS/UpdateContactoResponse")]
        System.Threading.Tasks.Task<bool> UpdateContactoAsync(int ID, int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteContacto", ReplyAction="http://tempuri.org/IGCIS/DeleteContactoResponse")]
        bool DeleteContacto(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteContacto", ReplyAction="http://tempuri.org/IGCIS/DeleteContactoResponse")]
        System.Threading.Tasks.Task<bool> DeleteContactoAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabaseIDInstancia", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseIDInstanciaResponse")]
        GCISApp.WSGCIS.Data SelectDatabaseIDInstancia(int IDInstancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabaseIDInstancia", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseIDInstanciaResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseIDInstanciaAsync(int IDInstancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabase", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseResponse")]
        GCISApp.WSGCIS.Data SelectDatabase(string NombreDatabase, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabase", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseAsync(string NombreDatabase, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDatabase", ReplyAction="http://tempuri.org/IGCIS/InsertDatabaseResponse")]
        bool InsertDatabase(int IDInstancia, string Nombre, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDatabase", ReplyAction="http://tempuri.org/IGCIS/InsertDatabaseResponse")]
        System.Threading.Tasks.Task<bool> InsertDatabaseAsync(int IDInstancia, string Nombre, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDatabase", ReplyAction="http://tempuri.org/IGCIS/UpdateDatabaseResponse")]
        bool UpdateDatabase(int IDDatabase, int IDInstancia, string Nombre, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDatabase", ReplyAction="http://tempuri.org/IGCIS/UpdateDatabaseResponse")]
        System.Threading.Tasks.Task<bool> UpdateDatabaseAsync(int IDDatabase, int IDInstancia, string Nombre, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDatabase", ReplyAction="http://tempuri.org/IGCIS/DeleteDatabaseResponse")]
        bool DeleteDatabase(int IDDatabase, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDatabase", ReplyAction="http://tempuri.org/IGCIS/DeleteDatabaseResponse")]
        System.Threading.Tasks.Task<bool> DeleteDatabaseAsync(int IDDatabase, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseMantenimientoResponse")]
        GCISApp.WSGCIS.Data SelectDatabaseMantenimiento(int IDDatabase, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseMantenimientoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseMantenimientoAsync(int IDDatabase, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/InsertDatabaseMantenimientoResponse")]
        bool InsertDatabaseMantenimiento(int IDDatabase, int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/InsertDatabaseMantenimientoResponse")]
        System.Threading.Tasks.Task<bool> InsertDatabaseMantenimientoAsync(int IDDatabase, int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/UpdateDatabaseMantenimientoResponse")]
        bool UpdateDatabaseMantenimiento(int IDDatabase, int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/UpdateDatabaseMantenimientoResponse")]
        System.Threading.Tasks.Task<bool> UpdateDatabaseMantenimientoAsync(int IDDatabase, int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/DeleteDatabaseMantenimientoResponse")]
        bool DeleteDatabaseMantenimiento(int IDDatabase, int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDatabaseMantenimiento", ReplyAction="http://tempuri.org/IGCIS/DeleteDatabaseMantenimientoResponse")]
        System.Threading.Tasks.Task<bool> DeleteDatabaseMantenimientoAsync(int IDDatabase, int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseUsuarioResponse")]
        GCISApp.WSGCIS.Data SelectDatabaseUsuario(string DatabaseNombre, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/SelectDatabaseUsuarioResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseUsuarioAsync(string DatabaseNombre, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/InsertDatabaseUsuarioResponse")]
        bool InsertDatabaseUsuario(int IDDatabase, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/InsertDatabaseUsuarioResponse")]
        System.Threading.Tasks.Task<bool> InsertDatabaseUsuarioAsync(int IDDatabase, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/UpdateDatabaseUsuarioResponse")]
        bool UpdateDatabaseUsuario(int IDDatabase, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/UpdateDatabaseUsuarioResponse")]
        System.Threading.Tasks.Task<bool> UpdateDatabaseUsuarioAsync(int IDDatabase, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/DeleteDatabaseUsuarioResponse")]
        bool DeleteDatabaseUsuario(int IDDatabase, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDatabaseUsuario", ReplyAction="http://tempuri.org/IGCIS/DeleteDatabaseUsuarioResponse")]
        System.Threading.Tasks.Task<bool> DeleteDatabaseUsuarioAsync(int IDDatabase, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDisco", ReplyAction="http://tempuri.org/IGCIS/SelectDiscoResponse")]
        GCISApp.WSGCIS.Data SelectDisco(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDisco", ReplyAction="http://tempuri.org/IGCIS/SelectDiscoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDiscoAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDisco", ReplyAction="http://tempuri.org/IGCIS/InsertDiscoResponse")]
        bool InsertDisco(int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDisco", ReplyAction="http://tempuri.org/IGCIS/InsertDiscoResponse")]
        System.Threading.Tasks.Task<bool> InsertDiscoAsync(int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDisco", ReplyAction="http://tempuri.org/IGCIS/UpdateDiscoResponse")]
        bool UpdateDisco(int IDDisco, int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDisco", ReplyAction="http://tempuri.org/IGCIS/UpdateDiscoResponse")]
        System.Threading.Tasks.Task<bool> UpdateDiscoAsync(int IDDisco, int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDisco", ReplyAction="http://tempuri.org/IGCIS/DeleteDiscoResponse")]
        bool DeleteDisco(int IDDisco, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDisco", ReplyAction="http://tempuri.org/IGCIS/DeleteDiscoResponse")]
        System.Threading.Tasks.Task<bool> DeleteDiscoAsync(int IDDisco, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/SelectDocumentoServidorResponse")]
        GCISApp.WSGCIS.Data SelectDocumentoServidor(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/SelectDocumentoServidorResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDocumentoServidorAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/InsertDocumentoServidorResponse")]
        bool InsertDocumentoServidor(int IDServidor, string NombreDocumento, byte[] Documento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/InsertDocumentoServidorResponse")]
        System.Threading.Tasks.Task<bool> InsertDocumentoServidorAsync(int IDServidor, string NombreDocumento, byte[] Documento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/UpdateDocumentoServidorResponse")]
        bool UpdateDocumentoServidor(int IDDocumento, string NombreDocumento, byte[] Documento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/UpdateDocumentoServidorResponse")]
        System.Threading.Tasks.Task<bool> UpdateDocumentoServidorAsync(int IDDocumento, string NombreDocumento, byte[] Documento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/DeleteDocumentoServidorResponse")]
        bool DeleteDocumentoServidor(int IDDocumento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteDocumentoServidor", ReplyAction="http://tempuri.org/IGCIS/DeleteDocumentoServidorResponse")]
        System.Threading.Tasks.Task<bool> DeleteDocumentoServidorAsync(int IDDocumento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectEdificio", ReplyAction="http://tempuri.org/IGCIS/SelectEdificioResponse")]
        GCISApp.WSGCIS.Data SelectEdificio(string Edificio, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectEdificio", ReplyAction="http://tempuri.org/IGCIS/SelectEdificioResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectEdificioAsync(string Edificio, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertEdificio", ReplyAction="http://tempuri.org/IGCIS/InsertEdificioResponse")]
        bool InsertEdificio(string Edificio, string Direccion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertEdificio", ReplyAction="http://tempuri.org/IGCIS/InsertEdificioResponse")]
        System.Threading.Tasks.Task<bool> InsertEdificioAsync(string Edificio, string Direccion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateEdificio", ReplyAction="http://tempuri.org/IGCIS/UpdateEdificioResponse")]
        bool UpdateEdificio(int ID, string Edificio, string Direccion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateEdificio", ReplyAction="http://tempuri.org/IGCIS/UpdateEdificioResponse")]
        System.Threading.Tasks.Task<bool> UpdateEdificioAsync(int ID, string Edificio, string Direccion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteEdificio", ReplyAction="http://tempuri.org/IGCIS/DeleteEdificioResponse")]
        bool DeleteEdificio(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteEdificio", ReplyAction="http://tempuri.org/IGCIS/DeleteEdificioResponse")]
        System.Threading.Tasks.Task<bool> DeleteEdificioAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectEthernet", ReplyAction="http://tempuri.org/IGCIS/SelectEthernetResponse")]
        GCISApp.WSGCIS.Data SelectEthernet(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectEthernet", ReplyAction="http://tempuri.org/IGCIS/SelectEthernetResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectEthernetAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertEthernet", ReplyAction="http://tempuri.org/IGCIS/InsertEthernetResponse")]
        bool InsertEthernet(string DireccionIP, int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertEthernet", ReplyAction="http://tempuri.org/IGCIS/InsertEthernetResponse")]
        System.Threading.Tasks.Task<bool> InsertEthernetAsync(string DireccionIP, int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateEthernet", ReplyAction="http://tempuri.org/IGCIS/UpdateEthernetResponse")]
        bool UpdateEthernet(string DireccionIP, int IDServidor, string NewDireccionIP, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateEthernet", ReplyAction="http://tempuri.org/IGCIS/UpdateEthernetResponse")]
        System.Threading.Tasks.Task<bool> UpdateEthernetAsync(string DireccionIP, int IDServidor, string NewDireccionIP, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteEthernet", ReplyAction="http://tempuri.org/IGCIS/DeleteEthernetResponse")]
        bool DeleteEthernet(string DireccionIP, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteEthernet", ReplyAction="http://tempuri.org/IGCIS/DeleteEthernetResponse")]
        System.Threading.Tasks.Task<bool> DeleteEthernetAsync(string DireccionIP, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectInstanciaAplicacionIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectInstanciaAplicacionIDServerResponse")]
        GCISApp.WSGCIS.Data SelectInstanciaAplicacionIDServer(int IDServidor, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectInstanciaAplicacionIDServer", ReplyAction="http://tempuri.org/IGCIS/SelectInstanciaAplicacionIDServerResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectInstanciaAplicacionIDServerAsync(int IDServidor, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/SelectInstanciaAplicacionResponse")]
        GCISApp.WSGCIS.Data SelectInstanciaAplicacion(string Instancia, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/SelectInstanciaAplicacionResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectInstanciaAplicacionAsync(string Instancia, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/InsertInstanciaAplicacionResponse")]
        bool InsertInstanciaAplicacion(int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/InsertInstanciaAplicacionResponse")]
        System.Threading.Tasks.Task<bool> InsertInstanciaAplicacionAsync(int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/UpdateInstanciaAplicacionResponse")]
        bool UpdateInstanciaAplicacion(int IDInstancia, int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/UpdateInstanciaAplicacionResponse")]
        System.Threading.Tasks.Task<bool> UpdateInstanciaAplicacionAsync(int IDInstancia, int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/DeleteInstanciaAplicacionResponse")]
        bool DeleteInstanciaAplicacion(int IDInstancia, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteInstanciaAplicacion", ReplyAction="http://tempuri.org/IGCIS/DeleteInstanciaAplicacionResponse")]
        System.Threading.Tasks.Task<bool> DeleteInstanciaAplicacionAsync(int IDInstancia, string UsuarioLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectMarca", ReplyAction="http://tempuri.org/IGCIS/SelectMarcaResponse")]
        GCISApp.WSGCIS.Data SelectMarca(string Marca, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectMarca", ReplyAction="http://tempuri.org/IGCIS/SelectMarcaResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectMarcaAsync(string Marca, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertMarca", ReplyAction="http://tempuri.org/IGCIS/InsertMarcaResponse")]
        bool InsertMarca(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertMarca", ReplyAction="http://tempuri.org/IGCIS/InsertMarcaResponse")]
        System.Threading.Tasks.Task<bool> InsertMarcaAsync(string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateMarca", ReplyAction="http://tempuri.org/IGCIS/UpdateMarcaResponse")]
        bool UpdateMarca(int ID, string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateMarca", ReplyAction="http://tempuri.org/IGCIS/UpdateMarcaResponse")]
        System.Threading.Tasks.Task<bool> UpdateMarcaAsync(int ID, string Status, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteMarca", ReplyAction="http://tempuri.org/IGCIS/DeleteMarcaResponse")]
        bool DeleteMarca(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteMarca", ReplyAction="http://tempuri.org/IGCIS/DeleteMarcaResponse")]
        System.Threading.Tasks.Task<bool> DeleteMarcaAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectModeloByMarca", ReplyAction="http://tempuri.org/IGCIS/SelectModeloByMarcaResponse")]
        GCISApp.WSGCIS.Data SelectModeloByMarca(string Marca, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectModeloByMarca", ReplyAction="http://tempuri.org/IGCIS/SelectModeloByMarcaResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectModeloByMarcaAsync(string Marca, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectModelo", ReplyAction="http://tempuri.org/IGCIS/SelectModeloResponse")]
        GCISApp.WSGCIS.Data SelectModelo(string Modelo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectModelo", ReplyAction="http://tempuri.org/IGCIS/SelectModeloResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectModeloAsync(string Modelo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertModelo", ReplyAction="http://tempuri.org/IGCIS/InsertModeloResponse")]
        bool InsertModelo(int IDMarca, string Modelo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertModelo", ReplyAction="http://tempuri.org/IGCIS/InsertModeloResponse")]
        System.Threading.Tasks.Task<bool> InsertModeloAsync(int IDMarca, string Modelo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateModelo", ReplyAction="http://tempuri.org/IGCIS/UpdateModeloResponse")]
        bool UpdateModelo(int ID, int IDMarca, string Modelo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateModelo", ReplyAction="http://tempuri.org/IGCIS/UpdateModeloResponse")]
        System.Threading.Tasks.Task<bool> UpdateModeloAsync(int ID, int IDMarca, string Modelo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteModelo", ReplyAction="http://tempuri.org/IGCIS/DeleteModeloResponse")]
        bool DeleteModelo(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteModelo", ReplyAction="http://tempuri.org/IGCIS/DeleteModeloResponse")]
        System.Threading.Tasks.Task<bool> DeleteModeloAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/SelectPlanMantenimientoResponse")]
        GCISApp.WSGCIS.Data SelectPlanMantenimiento(string NombreInstancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/SelectPlanMantenimientoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPlanMantenimientoAsync(string NombreInstancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertPlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/InsertPlanMantenimientoResponse")]
        bool InsertPlanMantenimiento(int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertPlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/InsertPlanMantenimientoResponse")]
        System.Threading.Tasks.Task<bool> InsertPlanMantenimientoAsync(int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdatePlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/UpdatePlanMantenimientoResponse")]
        bool UpdatePlanMantenimiento(int IDPlanMantenimiento, int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdatePlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/UpdatePlanMantenimientoResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlanMantenimientoAsync(int IDPlanMantenimiento, int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeletePlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/DeletePlanMantenimientoResponse")]
        bool DeletePlanMantenimiento(int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeletePlanMantenimiento", ReplyAction="http://tempuri.org/IGCIS/DeletePlanMantenimientoResponse")]
        System.Threading.Tasks.Task<bool> DeletePlanMantenimientoAsync(int IDPlanMantenimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPoolBySan", ReplyAction="http://tempuri.org/IGCIS/SelectPoolBySanResponse")]
        GCISApp.WSGCIS.Data SelectPoolBySan(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPoolBySan", ReplyAction="http://tempuri.org/IGCIS/SelectPoolBySanResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPoolBySanAsync(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPool", ReplyAction="http://tempuri.org/IGCIS/SelectPoolResponse")]
        GCISApp.WSGCIS.Data SelectPool(string Pool, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectPool", ReplyAction="http://tempuri.org/IGCIS/SelectPoolResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPoolAsync(string Pool, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertPool", ReplyAction="http://tempuri.org/IGCIS/InsertPoolResponse")]
        bool InsertPool(int IDSan, string Pool, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertPool", ReplyAction="http://tempuri.org/IGCIS/InsertPoolResponse")]
        System.Threading.Tasks.Task<bool> InsertPoolAsync(int IDSan, string Pool, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdatePool", ReplyAction="http://tempuri.org/IGCIS/UpdatePoolResponse")]
        bool UpdatePool(int IDPool, int IDSan, string Pool, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdatePool", ReplyAction="http://tempuri.org/IGCIS/UpdatePoolResponse")]
        System.Threading.Tasks.Task<bool> UpdatePoolAsync(int IDPool, int IDSan, string Pool, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeletePool", ReplyAction="http://tempuri.org/IGCIS/DeletePoolResponse")]
        bool DeletePool(int IDPool, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeletePool", ReplyAction="http://tempuri.org/IGCIS/DeletePoolResponse")]
        System.Threading.Tasks.Task<bool> DeletePoolAsync(int IDPool, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectProcesador", ReplyAction="http://tempuri.org/IGCIS/SelectProcesadorResponse")]
        GCISApp.WSGCIS.Data SelectProcesador(string Like, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectProcesador", ReplyAction="http://tempuri.org/IGCIS/SelectProcesadorResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectProcesadorAsync(string Like, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertProcesador", ReplyAction="http://tempuri.org/IGCIS/InsertProcesadorResponse")]
        bool InsertProcesador(int IDMarca, string Procesador, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertProcesador", ReplyAction="http://tempuri.org/IGCIS/InsertProcesadorResponse")]
        System.Threading.Tasks.Task<bool> InsertProcesadorAsync(int IDMarca, string Procesador, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateProcesador", ReplyAction="http://tempuri.org/IGCIS/UpdateProcesadorResponse")]
        bool UpdateProcesador(int ID, int IDMarca, string Procesador, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateProcesador", ReplyAction="http://tempuri.org/IGCIS/UpdateProcesadorResponse")]
        System.Threading.Tasks.Task<bool> UpdateProcesadorAsync(int ID, int IDMarca, string Procesador, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteProcesador", ReplyAction="http://tempuri.org/IGCIS/DeleteProcesadorResponse")]
        bool DeleteProcesador(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteProcesador", ReplyAction="http://tempuri.org/IGCIS/DeleteProcesadorResponse")]
        System.Threading.Tasks.Task<bool> DeleteProcesadorAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectProveedor", ReplyAction="http://tempuri.org/IGCIS/SelectProveedorResponse")]
        GCISApp.WSGCIS.Data SelectProveedor(string NombreProveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectProveedor", ReplyAction="http://tempuri.org/IGCIS/SelectProveedorResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectProveedorAsync(string NombreProveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertProveedor", ReplyAction="http://tempuri.org/IGCIS/InsertProveedorResponse")]
        bool InsertProveedor(string Proveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertProveedor", ReplyAction="http://tempuri.org/IGCIS/InsertProveedorResponse")]
        System.Threading.Tasks.Task<bool> InsertProveedorAsync(string Proveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateProveedor", ReplyAction="http://tempuri.org/IGCIS/UpdateProveedorResponse")]
        bool UpdateProveedor(int ID, string Proveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateProveedor", ReplyAction="http://tempuri.org/IGCIS/UpdateProveedorResponse")]
        System.Threading.Tasks.Task<bool> UpdateProveedorAsync(int ID, string Proveedor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteProveedor", ReplyAction="http://tempuri.org/IGCIS/DeleteProveedorResponse")]
        bool DeleteProveedor(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteProveedor", ReplyAction="http://tempuri.org/IGCIS/DeleteProveedorResponse")]
        System.Threading.Tasks.Task<bool> DeleteProveedorAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectRack", ReplyAction="http://tempuri.org/IGCIS/SelectRackResponse")]
        GCISApp.WSGCIS.Data SelectRack(string Like, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectRack", ReplyAction="http://tempuri.org/IGCIS/SelectRackResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectRackAsync(string Like, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertRack", ReplyAction="http://tempuri.org/IGCIS/InsertRackResponse")]
        bool InsertRack(string Rack, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertRack", ReplyAction="http://tempuri.org/IGCIS/InsertRackResponse")]
        System.Threading.Tasks.Task<bool> InsertRackAsync(string Rack, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateRack", ReplyAction="http://tempuri.org/IGCIS/UpdateRackResponse")]
        bool UpdateRack(int ID, string Rack, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateRack", ReplyAction="http://tempuri.org/IGCIS/UpdateRackResponse")]
        System.Threading.Tasks.Task<bool> UpdateRackAsync(int ID, string Rack, string Descripcion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteRack", ReplyAction="http://tempuri.org/IGCIS/DeleteRackResponse")]
        bool DeleteRack(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteRack", ReplyAction="http://tempuri.org/IGCIS/DeleteRackResponse")]
        System.Threading.Tasks.Task<bool> DeleteRackAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectRedundancia", ReplyAction="http://tempuri.org/IGCIS/SelectRedundanciaResponse")]
        GCISApp.WSGCIS.Data SelectRedundancia(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectRedundancia", ReplyAction="http://tempuri.org/IGCIS/SelectRedundanciaResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectRedundanciaAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertRedundancia", ReplyAction="http://tempuri.org/IGCIS/InsertRedundanciaResponse")]
        bool InsertRedundancia(int IDServidor, int IDRedundancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertRedundancia", ReplyAction="http://tempuri.org/IGCIS/InsertRedundanciaResponse")]
        System.Threading.Tasks.Task<bool> InsertRedundanciaAsync(int IDServidor, int IDRedundancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateRedundancia", ReplyAction="http://tempuri.org/IGCIS/UpdateRedundanciaResponse")]
        bool UpdateRedundancia(int IDServidor, int IDRedundancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateRedundancia", ReplyAction="http://tempuri.org/IGCIS/UpdateRedundanciaResponse")]
        System.Threading.Tasks.Task<bool> UpdateRedundanciaAsync(int IDServidor, int IDRedundancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteRedundancia", ReplyAction="http://tempuri.org/IGCIS/DeleteRedundanciaResponse")]
        bool DeleteRedundancia(int IDServidor, int IDRedundancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteRedundancia", ReplyAction="http://tempuri.org/IGCIS/DeleteRedundanciaResponse")]
        System.Threading.Tasks.Task<bool> DeleteRedundanciaAsync(int IDServidor, int IDRedundancia, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectSAN", ReplyAction="http://tempuri.org/IGCIS/SelectSANResponse")]
        GCISApp.WSGCIS.Data SelectSAN(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectSAN", ReplyAction="http://tempuri.org/IGCIS/SelectSANResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectSANAsync(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertSAN", ReplyAction="http://tempuri.org/IGCIS/InsertSANResponse")]
        bool InsertSAN(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertSAN", ReplyAction="http://tempuri.org/IGCIS/InsertSANResponse")]
        System.Threading.Tasks.Task<bool> InsertSANAsync(string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateSAN", ReplyAction="http://tempuri.org/IGCIS/UpdateSANResponse")]
        bool UpdateSAN(int IDSan, string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateSAN", ReplyAction="http://tempuri.org/IGCIS/UpdateSANResponse")]
        System.Threading.Tasks.Task<bool> UpdateSANAsync(int IDSan, string San, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteSAN", ReplyAction="http://tempuri.org/IGCIS/DeleteSANResponse")]
        bool DeleteSAN(int IDSan, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteSAN", ReplyAction="http://tempuri.org/IGCIS/DeleteSANResponse")]
        System.Threading.Tasks.Task<bool> DeleteSANAsync(int IDSan, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidor4Redundancia", ReplyAction="http://tempuri.org/IGCIS/SelectServidor4RedundanciaResponse")]
        GCISApp.WSGCIS.Data SelectServidor4Redundancia(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidor4Redundancia", ReplyAction="http://tempuri.org/IGCIS/SelectServidor4RedundanciaResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidor4RedundanciaAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidor", ReplyAction="http://tempuri.org/IGCIS/SelectServidorResponse")]
        GCISApp.WSGCIS.Data SelectServidor(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidor", ReplyAction="http://tempuri.org/IGCIS/SelectServidorResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidor", ReplyAction="http://tempuri.org/IGCIS/InsertServidorResponse")]
        bool InsertServidor(int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidor", ReplyAction="http://tempuri.org/IGCIS/InsertServidorResponse")]
        System.Threading.Tasks.Task<bool> InsertServidorAsync(int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidor", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorResponse")]
        bool UpdateServidor(int IDServidor, int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidor", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorResponse")]
        System.Threading.Tasks.Task<bool> UpdateServidorAsync(int IDServidor, int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidor", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorResponse")]
        bool DeleteServidor(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidor", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorResponse")]
        System.Threading.Tasks.Task<bool> DeleteServidorAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorFisico", ReplyAction="http://tempuri.org/IGCIS/SelectServidorFisicoResponse")]
        GCISApp.WSGCIS.Data SelectServidorFisico(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorFisico", ReplyAction="http://tempuri.org/IGCIS/SelectServidorFisicoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorFisicoAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorFisico", ReplyAction="http://tempuri.org/IGCIS/InsertServidorFisicoResponse")]
        bool InsertServidorFisico(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorFisico", ReplyAction="http://tempuri.org/IGCIS/InsertServidorFisicoResponse")]
        System.Threading.Tasks.Task<bool> InsertServidorFisicoAsync(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateservidorFisico", ReplyAction="http://tempuri.org/IGCIS/UpdateservidorFisicoResponse")]
        bool UpdateservidorFisico(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateservidorFisico", ReplyAction="http://tempuri.org/IGCIS/UpdateservidorFisicoResponse")]
        System.Threading.Tasks.Task<bool> UpdateservidorFisicoAsync(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorFisico", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorFisicoResponse")]
        bool DeleteServidorFisico(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorFisico", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorFisicoResponse")]
        System.Threading.Tasks.Task<bool> DeleteServidorFisicoAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/SelectServidorSolucionResponse")]
        GCISApp.WSGCIS.Data SelectServidorSolucion(string Solucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/SelectServidorSolucionResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorSolucionAsync(string Solucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/InsertServidorSolucionResponse")]
        bool InsertServidorSolucion(int IDServidor, int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/InsertServidorSolucionResponse")]
        System.Threading.Tasks.Task<bool> InsertServidorSolucionAsync(int IDServidor, int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorSolucionResponse")]
        bool UpdateServidorSolucion(int IDServidor, int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorSolucionResponse")]
        System.Threading.Tasks.Task<bool> UpdateServidorSolucionAsync(int IDServidor, int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorSolucionResponse")]
        bool DeleteServidorSolucion(int IDServidor, int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorSolucion", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorSolucionResponse")]
        System.Threading.Tasks.Task<bool> DeleteServidorSolucionAsync(int IDServidor, int IDSolucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/SelectServidorUsuarioResponse")]
        GCISApp.WSGCIS.Data SelectServidorUsuario(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/SelectServidorUsuarioResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorUsuarioAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/InsertServidorUsuarioResponse")]
        bool InsertServidorUsuario(int IDServidor, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/InsertServidorUsuarioResponse")]
        System.Threading.Tasks.Task<bool> InsertServidorUsuarioAsync(int IDServidor, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorUsuarioResponse")]
        bool UpdateServidorUsuario(int IDServidor, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorUsuarioResponse")]
        System.Threading.Tasks.Task<bool> UpdateServidorUsuarioAsync(int IDServidor, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorUsuarioResponse")]
        bool DeleteServidorUsuario(int IDServidor, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorUsuario", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorUsuarioResponse")]
        System.Threading.Tasks.Task<bool> DeleteServidorUsuarioAsync(int IDServidor, int IDUsuario, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/SelectServidorVirtualResponse")]
        GCISApp.WSGCIS.Data SelectServidorVirtual(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/SelectServidorVirtualResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorVirtualAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/InsertServidorVirtualResponse")]
        bool InsertServidorVirtual(int IDServidor, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/InsertServidorVirtualResponse")]
        System.Threading.Tasks.Task<bool> InsertServidorVirtualAsync(int IDServidor, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorVirtualResponse")]
        bool UpdateServidorVirtual(int IDServidor, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorVirtualResponse")]
        System.Threading.Tasks.Task<bool> UpdateServidorVirtualAsync(int IDServidor, int IDCluster, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorVirtualResponse")]
        bool DeleteServidorVirtual(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorVirtual", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorVirtualResponse")]
        System.Threading.Tasks.Task<bool> DeleteServidorVirtualAsync(int IDServidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/SelectServidorWebserviceResponse")]
        GCISApp.WSGCIS.Data SelectServidorWebservice(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/SelectServidorWebserviceResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorWebserviceAsync(string Servidor, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/InsertServidorWebserviceResponse")]
        bool InsertServidorWebservice(int IDServidor, int IDWebservice, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/InsertServidorWebserviceResponse")]
        System.Threading.Tasks.Task<bool> InsertServidorWebserviceAsync(int IDServidor, int IDWebservice, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorWebserviceResponse")]
        bool UpdateServidorWebservice(int IDServidor, int IDWebservice, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/UpdateServidorWebserviceResponse")]
        System.Threading.Tasks.Task<bool> UpdateServidorWebserviceAsync(int IDServidor, int IDWebservice, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorWebserviceResponse")]
        bool DeleteServidorWebservice(int IDServidor, int IDWebservice, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteServidorWebservice", ReplyAction="http://tempuri.org/IGCIS/DeleteServidorWebserviceResponse")]
        System.Threading.Tasks.Task<bool> DeleteServidorWebserviceAsync(int IDServidor, int IDWebservice, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/SelectSistemaOperativoResponse")]
        GCISApp.WSGCIS.Data SelectSistemaOperativo(int Proveedor, string SistemaOperativo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/SelectSistemaOperativoResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectSistemaOperativoAsync(int Proveedor, string SistemaOperativo, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/InsertSistemaOperativoResponse")]
        bool InsertSistemaOperativo(string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/InsertSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/InsertSistemaOperativoResponse")]
        System.Threading.Tasks.Task<bool> InsertSistemaOperativoAsync(string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/UpdateSistemaOperativoResponse")]
        bool UpdateSistemaOperativo(int ID, string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/UpdateSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/UpdateSistemaOperativoResponse")]
        System.Threading.Tasks.Task<bool> UpdateSistemaOperativoAsync(int ID, string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/DeleteSistemaOperativoResponse")]
        bool DeleteSistemaOperativo(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/DeleteSistemaOperativo", ReplyAction="http://tempuri.org/IGCIS/DeleteSistemaOperativoResponse")]
        System.Threading.Tasks.Task<bool> DeleteSistemaOperativoAsync(int ID, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectSolucion", ReplyAction="http://tempuri.org/IGCIS/SelectSolucionResponse")]
        GCISApp.WSGCIS.Data SelectSolucion(string Solucion, string Usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGCIS/SelectSolucion", ReplyAction="http://tempuri.org/IGCIS/SelectSolucionResponse")]
        System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectSolucionAsync(string Solucion, string Usuario);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGCISChannel : GCISApp.WSGCIS.IGCIS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GCISClient : System.ServiceModel.ClientBase<GCISApp.WSGCIS.IGCIS>, GCISApp.WSGCIS.IGCIS {
        
        public GCISClient() {
        }
        
        public GCISClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GCISClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GCISClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GCISClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool InsertSolucion(string Solucion, string Descripcion, string Usuario) {
            return base.Channel.InsertSolucion(Solucion, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSolucionAsync(string Solucion, string Descripcion, string Usuario) {
            return base.Channel.InsertSolucionAsync(Solucion, Descripcion, Usuario);
        }
        
        public bool UpdateSolucion(int IDSolucion, string Solucion, string Descripcion, string Usuario) {
            return base.Channel.UpdateSolucion(IDSolucion, Solucion, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSolucionAsync(int IDSolucion, string Solucion, string Descripcion, string Usuario) {
            return base.Channel.UpdateSolucionAsync(IDSolucion, Solucion, Descripcion, Usuario);
        }
        
        public bool DeleteSolucion(int IDSolucion, string Usuario) {
            return base.Channel.DeleteSolucion(IDSolucion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSolucionAsync(int IDSolucion, string Usuario) {
            return base.Channel.DeleteSolucionAsync(IDSolucion, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectStatus(string Status, string Usuario) {
            return base.Channel.SelectStatus(Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectStatusAsync(string Status, string Usuario) {
            return base.Channel.SelectStatusAsync(Status, Usuario);
        }
        
        public bool InsertStatus(string Status, string Usuario) {
            return base.Channel.InsertStatus(Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertStatusAsync(string Status, string Usuario) {
            return base.Channel.InsertStatusAsync(Status, Usuario);
        }
        
        public bool UpdateStatus(int ID, string Status, string Usuario) {
            return base.Channel.UpdateStatus(ID, Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateStatusAsync(int ID, string Status, string Usuario) {
            return base.Channel.UpdateStatusAsync(ID, Status, Usuario);
        }
        
        public bool DeleteStatus(int ID, string Usuario) {
            return base.Channel.DeleteStatus(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteStatusAsync(int ID, string Usuario) {
            return base.Channel.DeleteStatusAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectTipo(string Tipo, string Usuario) {
            return base.Channel.SelectTipo(Tipo, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectTipoAsync(string Tipo, string Usuario) {
            return base.Channel.SelectTipoAsync(Tipo, Usuario);
        }
        
        public bool InsertTipo(string Status, string Usuario) {
            return base.Channel.InsertTipo(Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertTipoAsync(string Status, string Usuario) {
            return base.Channel.InsertTipoAsync(Status, Usuario);
        }
        
        public bool UpdateTipo(int ID, string Status, string Usuario) {
            return base.Channel.UpdateTipo(ID, Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTipoAsync(int ID, string Status, string Usuario) {
            return base.Channel.UpdateTipoAsync(ID, Status, Usuario);
        }
        
        public bool DeleteTipo(int ID, string Usuario) {
            return base.Channel.DeleteTipo(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTipoAsync(int ID, string Usuario) {
            return base.Channel.DeleteTipoAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectUrlAdministracionSAN(string San, string Usuario) {
            return base.Channel.SelectUrlAdministracionSAN(San, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUrlAdministracionSANAsync(string San, string Usuario) {
            return base.Channel.SelectUrlAdministracionSANAsync(San, Usuario);
        }
        
        public bool InsertUrlAdministracionSAN(int IDSan, string Url, string Usuario) {
            return base.Channel.InsertUrlAdministracionSAN(IDSan, Url, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUrlAdministracionSANAsync(int IDSan, string Url, string Usuario) {
            return base.Channel.InsertUrlAdministracionSANAsync(IDSan, Url, Usuario);
        }
        
        public bool UpdateUrlAdministracionSAN(int IDUrl, int IDSan, string Url, string Usuario) {
            return base.Channel.UpdateUrlAdministracionSAN(IDUrl, IDSan, Url, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUrlAdministracionSANAsync(int IDUrl, int IDSan, string Url, string Usuario) {
            return base.Channel.UpdateUrlAdministracionSANAsync(IDUrl, IDSan, Url, Usuario);
        }
        
        public bool DeleteUrlAdministracionSAN(int IDUrl, string Usuario) {
            return base.Channel.DeleteUrlAdministracionSAN(IDUrl, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUrlAdministracionSANAsync(int IDUrl, string Usuario) {
            return base.Channel.DeleteUrlAdministracionSANAsync(IDUrl, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectUsuarioIDServer(int IDServidor, string UsuarioLog) {
            return base.Channel.SelectUsuarioIDServer(IDServidor, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioIDServerAsync(int IDServidor, string UsuarioLog) {
            return base.Channel.SelectUsuarioIDServerAsync(IDServidor, UsuarioLog);
        }
        
        public GCISApp.WSGCIS.Data SelectUsuario(string Usuario, string UsuarioLog) {
            return base.Channel.SelectUsuario(Usuario, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioAsync(string Usuario, string UsuarioLog) {
            return base.Channel.SelectUsuarioAsync(Usuario, UsuarioLog);
        }
        
        public bool InsertUsuario(int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog) {
            return base.Channel.InsertUsuario(IDServidor, Dominio, Usuario, Password, Descripcion, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUsuarioAsync(int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog) {
            return base.Channel.InsertUsuarioAsync(IDServidor, Dominio, Usuario, Password, Descripcion, UsuarioLog);
        }
        
        public bool UpdateUsuario(int IDUsuario, int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog) {
            return base.Channel.UpdateUsuario(IDUsuario, IDServidor, Dominio, Usuario, Password, Descripcion, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUsuarioAsync(int IDUsuario, int IDServidor, string Dominio, string Usuario, string Password, string Descripcion, string UsuarioLog) {
            return base.Channel.UpdateUsuarioAsync(IDUsuario, IDServidor, Dominio, Usuario, Password, Descripcion, UsuarioLog);
        }
        
        public bool DeleteUsuario(int IDUsuario, string UsuarioLog) {
            return base.Channel.DeleteUsuario(IDUsuario, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUsuarioAsync(int IDUsuario, string UsuarioLog) {
            return base.Channel.DeleteUsuarioAsync(IDUsuario, UsuarioLog);
        }
        
        public GCISApp.WSGCIS.Data SelectUsuarioInstancia(string InstanciaAplicacion, string UsuarioLog) {
            return base.Channel.SelectUsuarioInstancia(InstanciaAplicacion, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioInstanciaAsync(string InstanciaAplicacion, string UsuarioLog) {
            return base.Channel.SelectUsuarioInstanciaAsync(InstanciaAplicacion, UsuarioLog);
        }
        
        public bool InsertUsuarioInstancia(int IDInstancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.InsertUsuarioInstancia(IDInstancia, Usuario, Password, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUsuarioInstanciaAsync(int IDInstancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.InsertUsuarioInstanciaAsync(IDInstancia, Usuario, Password, UsuarioLog);
        }
        
        public bool UpdateUsuarioInstancia(int IDUsuario, int IDInstancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.UpdateUsuarioInstancia(IDUsuario, IDInstancia, Usuario, Password, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUsuarioInstanciaAsync(int IDUsuario, int IDInstancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.UpdateUsuarioInstanciaAsync(IDUsuario, IDInstancia, Usuario, Password, UsuarioLog);
        }
        
        public bool DeleteUsuarioInstancia(int IDUsuario, string UsuarioLog) {
            return base.Channel.DeleteUsuarioInstancia(IDUsuario, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUsuarioInstanciaAsync(int IDUsuario, string UsuarioLog) {
            return base.Channel.DeleteUsuarioInstanciaAsync(IDUsuario, UsuarioLog);
        }
        
        public GCISApp.WSGCIS.Data SelectUsuarioSAN(string San, string UsuarioLog) {
            return base.Channel.SelectUsuarioSAN(San, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectUsuarioSANAsync(string San, string UsuarioLog) {
            return base.Channel.SelectUsuarioSANAsync(San, UsuarioLog);
        }
        
        public bool InsertUsuarioSAN(int IDSan, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.InsertUsuarioSAN(IDSan, Usuario, Password, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUsuarioSANAsync(int IDSan, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.InsertUsuarioSANAsync(IDSan, Usuario, Password, UsuarioLog);
        }
        
        public bool UpdateUsuarioSAN(int IDUsuario, int IDSan, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.UpdateUsuarioSAN(IDUsuario, IDSan, Usuario, Password, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUsuarioSANAsync(int IDUsuario, int IDSan, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.UpdateUsuarioSANAsync(IDUsuario, IDSan, Usuario, Password, UsuarioLog);
        }
        
        public bool DeleteUsuarioSAN(int IDUsuario, string UsuarioLog) {
            return base.Channel.DeleteUsuarioSAN(IDUsuario, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUsuarioSANAsync(int IDUsuario, string UsuarioLog) {
            return base.Channel.DeleteUsuarioSANAsync(IDUsuario, UsuarioLog);
        }
        
        public GCISApp.WSGCIS.Data SelectWebServiceIDServer(int IDServidor, string Usuario) {
            return base.Channel.SelectWebServiceIDServer(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectWebServiceIDServerAsync(int IDServidor, string Usuario) {
            return base.Channel.SelectWebServiceIDServerAsync(IDServidor, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectWebService(string NombreWebService, string Usuario) {
            return base.Channel.SelectWebService(NombreWebService, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectWebServiceAsync(string NombreWebService, string Usuario) {
            return base.Channel.SelectWebServiceAsync(NombreWebService, Usuario);
        }
        
        public bool InsertWebService(int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario) {
            return base.Channel.InsertWebService(IDServidor, NombreWebService, Carpeta, Url, PublicadoInternet, UrlExterna, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertWebServiceAsync(int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario) {
            return base.Channel.InsertWebServiceAsync(IDServidor, NombreWebService, Carpeta, Url, PublicadoInternet, UrlExterna, Usuario);
        }
        
        public bool UpdateWebService(int IDWebService, int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario) {
            return base.Channel.UpdateWebService(IDWebService, IDServidor, NombreWebService, Carpeta, Url, PublicadoInternet, UrlExterna, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateWebServiceAsync(int IDWebService, int IDServidor, string NombreWebService, string Carpeta, string Url, string PublicadoInternet, string UrlExterna, string Usuario) {
            return base.Channel.UpdateWebServiceAsync(IDWebService, IDServidor, NombreWebService, Carpeta, Url, PublicadoInternet, UrlExterna, Usuario);
        }
        
        public bool DeleteWebService(int IDWebService, string Usuario) {
            return base.Channel.DeleteWebService(IDWebService, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWebServiceAsync(int IDWebService, string Usuario) {
            return base.Channel.DeleteWebServiceAsync(IDWebService, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectPermisosUsuarios(string Usuario) {
            return base.Channel.SelectPermisosUsuarios(Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPermisosUsuariosAsync(string Usuario) {
            return base.Channel.SelectPermisosUsuariosAsync(Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectAcceso(string Usuario) {
            return base.Channel.SelectAcceso(Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectAccesoAsync(string Usuario) {
            return base.Channel.SelectAccesoAsync(Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectAmbiente(string Ambiente, string Usuario) {
            return base.Channel.SelectAmbiente(Ambiente, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectAmbienteAsync(string Ambiente, string Usuario) {
            return base.Channel.SelectAmbienteAsync(Ambiente, Usuario);
        }
        
        public bool InsertAmbiente(string Ambiente, string Usuario) {
            return base.Channel.InsertAmbiente(Ambiente, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAmbienteAsync(string Ambiente, string Usuario) {
            return base.Channel.InsertAmbienteAsync(Ambiente, Usuario);
        }
        
        public bool UpdateAmbiente(int ID, string Ambiente, string Usuario) {
            return base.Channel.UpdateAmbiente(ID, Ambiente, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAmbienteAsync(int ID, string Ambiente, string Usuario) {
            return base.Channel.UpdateAmbienteAsync(ID, Ambiente, Usuario);
        }
        
        public bool DeleteAmbiente(int ID, string Usuario) {
            return base.Channel.DeleteAmbiente(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAmbienteAsync(int ID, string Usuario) {
            return base.Channel.DeleteAmbienteAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectAplicacion(int Proveedor, string Aplicacion, string Usuario) {
            return base.Channel.SelectAplicacion(Proveedor, Aplicacion, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectAplicacionAsync(int Proveedor, string Aplicacion, string Usuario) {
            return base.Channel.SelectAplicacionAsync(Proveedor, Aplicacion, Usuario);
        }
        
        public bool InsertAplicacion(string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.InsertAplicacion(Aplicacion, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAplicacionAsync(string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.InsertAplicacionAsync(Aplicacion, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public bool UpdateAplicacion(int ID, string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.UpdateAplicacion(ID, Aplicacion, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAplicacionAsync(int ID, string Aplicacion, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.UpdateAplicacionAsync(ID, Aplicacion, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public bool DeleteAplicacion(int ID, string Usuario) {
            return base.Channel.DeleteAplicacion(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAplicacionAsync(int ID, string Usuario) {
            return base.Channel.DeleteAplicacionAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectBackupExecJobsIDServer(int IDServidor, string Usuario) {
            return base.Channel.SelectBackupExecJobsIDServer(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectBackupExecJobsIDServerAsync(int IDServidor, string Usuario) {
            return base.Channel.SelectBackupExecJobsIDServerAsync(IDServidor, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectBackupExecJobs(string BackupJob, string Usuario) {
            return base.Channel.SelectBackupExecJobs(BackupJob, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectBackupExecJobsAsync(string BackupJob, string Usuario) {
            return base.Channel.SelectBackupExecJobsAsync(BackupJob, Usuario);
        }
        
        public bool InsertBackupExecJobs(int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.InsertBackupExecJobs(IDServidor, BackupExecJob, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertBackupExecJobsAsync(int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.InsertBackupExecJobsAsync(IDServidor, BackupExecJob, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public bool UpdateBackupExecJobs(int ID, int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.UpdateBackupExecJobs(ID, IDServidor, BackupExecJob, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateBackupExecJobsAsync(int ID, int IDServidor, string BackupExecJob, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.UpdateBackupExecJobsAsync(ID, IDServidor, BackupExecJob, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public bool DeleteBackupExecJobs(int ID, string Usuario) {
            return base.Channel.DeleteBackupExecJobs(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBackupExecJobsAsync(int ID, string Usuario) {
            return base.Channel.DeleteBackupExecJobsAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectCluster(string Cluster, string Usuario) {
            return base.Channel.SelectCluster(Cluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectClusterAsync(string Cluster, string Usuario) {
            return base.Channel.SelectClusterAsync(Cluster, Usuario);
        }
        
        public bool InsertCluster(string Cluster, string Descripcion, int IDAplicacion, string Usuario) {
            return base.Channel.InsertCluster(Cluster, Descripcion, IDAplicacion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertClusterAsync(string Cluster, string Descripcion, int IDAplicacion, string Usuario) {
            return base.Channel.InsertClusterAsync(Cluster, Descripcion, IDAplicacion, Usuario);
        }
        
        public bool UpdateCluster(int IDCluster, string Cluster, string Descripcion, int IDAplicacion, string Usuario) {
            return base.Channel.UpdateCluster(IDCluster, Cluster, Descripcion, IDAplicacion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClusterAsync(int IDCluster, string Cluster, string Descripcion, int IDAplicacion, string Usuario) {
            return base.Channel.UpdateClusterAsync(IDCluster, Cluster, Descripcion, IDAplicacion, Usuario);
        }
        
        public bool DeleteCluster(int ID, string Usuario) {
            return base.Channel.DeleteCluster(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClusterAsync(int ID, string Usuario) {
            return base.Channel.DeleteClusterAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectClusterServidorFisico(string Cluster, string Usuario) {
            return base.Channel.SelectClusterServidorFisico(Cluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectClusterServidorFisicoAsync(string Cluster, string Usuario) {
            return base.Channel.SelectClusterServidorFisicoAsync(Cluster, Usuario);
        }
        
        public bool InsertClusterServidorFisico(int IDServidorFisico, int IDCluster, string Usuario) {
            return base.Channel.InsertClusterServidorFisico(IDServidorFisico, IDCluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertClusterServidorFisicoAsync(int IDServidorFisico, int IDCluster, string Usuario) {
            return base.Channel.InsertClusterServidorFisicoAsync(IDServidorFisico, IDCluster, Usuario);
        }
        
        public bool UpdateClusterServidorFisico(int IDServidorFisico, int IDCluster, string Usuario) {
            return base.Channel.UpdateClusterServidorFisico(IDServidorFisico, IDCluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateClusterServidorFisicoAsync(int IDServidorFisico, int IDCluster, string Usuario) {
            return base.Channel.UpdateClusterServidorFisicoAsync(IDServidorFisico, IDCluster, Usuario);
        }
        
        public bool DeleteClusterServidorFisico(int IDServidorFisico, int IDCluster, string Usuario) {
            return base.Channel.DeleteClusterServidorFisico(IDServidorFisico, IDCluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteClusterServidorFisicoAsync(int IDServidorFisico, int IDCluster, string Usuario) {
            return base.Channel.DeleteClusterServidorFisicoAsync(IDServidorFisico, IDCluster, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectContacto(int Proveedor, string Usuario) {
            return base.Channel.SelectContacto(Proveedor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectContactoAsync(int Proveedor, string Usuario) {
            return base.Channel.SelectContactoAsync(Proveedor, Usuario);
        }
        
        public bool InsertContacto(int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario) {
            return base.Channel.InsertContacto(Proveedor, Nombre, Telefono, Emergencia, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertContactoAsync(int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario) {
            return base.Channel.InsertContactoAsync(Proveedor, Nombre, Telefono, Emergencia, Usuario);
        }
        
        public bool UpdateContacto(int ID, int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario) {
            return base.Channel.UpdateContacto(ID, Proveedor, Nombre, Telefono, Emergencia, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateContactoAsync(int ID, int Proveedor, string Nombre, string Telefono, string Emergencia, string Usuario) {
            return base.Channel.UpdateContactoAsync(ID, Proveedor, Nombre, Telefono, Emergencia, Usuario);
        }
        
        public bool DeleteContacto(int ID, string Usuario) {
            return base.Channel.DeleteContacto(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteContactoAsync(int ID, string Usuario) {
            return base.Channel.DeleteContactoAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectDatabaseIDInstancia(int IDInstancia, string Usuario) {
            return base.Channel.SelectDatabaseIDInstancia(IDInstancia, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseIDInstanciaAsync(int IDInstancia, string Usuario) {
            return base.Channel.SelectDatabaseIDInstanciaAsync(IDInstancia, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectDatabase(string NombreDatabase, string Usuario) {
            return base.Channel.SelectDatabase(NombreDatabase, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseAsync(string NombreDatabase, string Usuario) {
            return base.Channel.SelectDatabaseAsync(NombreDatabase, Usuario);
        }
        
        public bool InsertDatabase(int IDInstancia, string Nombre, string Descripcion, string Usuario) {
            return base.Channel.InsertDatabase(IDInstancia, Nombre, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDatabaseAsync(int IDInstancia, string Nombre, string Descripcion, string Usuario) {
            return base.Channel.InsertDatabaseAsync(IDInstancia, Nombre, Descripcion, Usuario);
        }
        
        public bool UpdateDatabase(int IDDatabase, int IDInstancia, string Nombre, string Descripcion, string Usuario) {
            return base.Channel.UpdateDatabase(IDDatabase, IDInstancia, Nombre, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDatabaseAsync(int IDDatabase, int IDInstancia, string Nombre, string Descripcion, string Usuario) {
            return base.Channel.UpdateDatabaseAsync(IDDatabase, IDInstancia, Nombre, Descripcion, Usuario);
        }
        
        public bool DeleteDatabase(int IDDatabase, string Usuario) {
            return base.Channel.DeleteDatabase(IDDatabase, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDatabaseAsync(int IDDatabase, string Usuario) {
            return base.Channel.DeleteDatabaseAsync(IDDatabase, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectDatabaseMantenimiento(int IDDatabase, string Usuario) {
            return base.Channel.SelectDatabaseMantenimiento(IDDatabase, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseMantenimientoAsync(int IDDatabase, string Usuario) {
            return base.Channel.SelectDatabaseMantenimientoAsync(IDDatabase, Usuario);
        }
        
        public bool InsertDatabaseMantenimiento(int IDDatabase, int IDPlanMantenimiento, string Usuario) {
            return base.Channel.InsertDatabaseMantenimiento(IDDatabase, IDPlanMantenimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDatabaseMantenimientoAsync(int IDDatabase, int IDPlanMantenimiento, string Usuario) {
            return base.Channel.InsertDatabaseMantenimientoAsync(IDDatabase, IDPlanMantenimiento, Usuario);
        }
        
        public bool UpdateDatabaseMantenimiento(int IDDatabase, int IDPlanMantenimiento, string Usuario) {
            return base.Channel.UpdateDatabaseMantenimiento(IDDatabase, IDPlanMantenimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDatabaseMantenimientoAsync(int IDDatabase, int IDPlanMantenimiento, string Usuario) {
            return base.Channel.UpdateDatabaseMantenimientoAsync(IDDatabase, IDPlanMantenimiento, Usuario);
        }
        
        public bool DeleteDatabaseMantenimiento(int IDDatabase, int IDPlanMantenimiento, string Usuario) {
            return base.Channel.DeleteDatabaseMantenimiento(IDDatabase, IDPlanMantenimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDatabaseMantenimientoAsync(int IDDatabase, int IDPlanMantenimiento, string Usuario) {
            return base.Channel.DeleteDatabaseMantenimientoAsync(IDDatabase, IDPlanMantenimiento, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectDatabaseUsuario(string DatabaseNombre, string Usuario) {
            return base.Channel.SelectDatabaseUsuario(DatabaseNombre, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDatabaseUsuarioAsync(string DatabaseNombre, string Usuario) {
            return base.Channel.SelectDatabaseUsuarioAsync(DatabaseNombre, Usuario);
        }
        
        public bool InsertDatabaseUsuario(int IDDatabase, int IDUsuario, string Usuario) {
            return base.Channel.InsertDatabaseUsuario(IDDatabase, IDUsuario, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDatabaseUsuarioAsync(int IDDatabase, int IDUsuario, string Usuario) {
            return base.Channel.InsertDatabaseUsuarioAsync(IDDatabase, IDUsuario, Usuario);
        }
        
        public bool UpdateDatabaseUsuario(int IDDatabase, int IDUsuario, string Usuario) {
            return base.Channel.UpdateDatabaseUsuario(IDDatabase, IDUsuario, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDatabaseUsuarioAsync(int IDDatabase, int IDUsuario, string Usuario) {
            return base.Channel.UpdateDatabaseUsuarioAsync(IDDatabase, IDUsuario, Usuario);
        }
        
        public bool DeleteDatabaseUsuario(int IDDatabase, int IDUsuario, string Usuario) {
            return base.Channel.DeleteDatabaseUsuario(IDDatabase, IDUsuario, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDatabaseUsuarioAsync(int IDDatabase, int IDUsuario, string Usuario) {
            return base.Channel.DeleteDatabaseUsuarioAsync(IDDatabase, IDUsuario, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectDisco(string Servidor, string Usuario) {
            return base.Channel.SelectDisco(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDiscoAsync(string Servidor, string Usuario) {
            return base.Channel.SelectDiscoAsync(Servidor, Usuario);
        }
        
        public bool InsertDisco(int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario) {
            return base.Channel.InsertDisco(IDServidor, Disco, Capacidad, IDPool, VolumenCompartido, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDiscoAsync(int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario) {
            return base.Channel.InsertDiscoAsync(IDServidor, Disco, Capacidad, IDPool, VolumenCompartido, Usuario);
        }
        
        public bool UpdateDisco(int IDDisco, int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario) {
            return base.Channel.UpdateDisco(IDDisco, IDServidor, Disco, Capacidad, IDPool, VolumenCompartido, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDiscoAsync(int IDDisco, int IDServidor, string Disco, int Capacidad, int IDPool, string VolumenCompartido, string Usuario) {
            return base.Channel.UpdateDiscoAsync(IDDisco, IDServidor, Disco, Capacidad, IDPool, VolumenCompartido, Usuario);
        }
        
        public bool DeleteDisco(int IDDisco, string Usuario) {
            return base.Channel.DeleteDisco(IDDisco, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDiscoAsync(int IDDisco, string Usuario) {
            return base.Channel.DeleteDiscoAsync(IDDisco, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectDocumentoServidor(int IDServidor, string Usuario) {
            return base.Channel.SelectDocumentoServidor(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectDocumentoServidorAsync(int IDServidor, string Usuario) {
            return base.Channel.SelectDocumentoServidorAsync(IDServidor, Usuario);
        }
        
        public bool InsertDocumentoServidor(int IDServidor, string NombreDocumento, byte[] Documento, string Usuario) {
            return base.Channel.InsertDocumentoServidor(IDServidor, NombreDocumento, Documento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertDocumentoServidorAsync(int IDServidor, string NombreDocumento, byte[] Documento, string Usuario) {
            return base.Channel.InsertDocumentoServidorAsync(IDServidor, NombreDocumento, Documento, Usuario);
        }
        
        public bool UpdateDocumentoServidor(int IDDocumento, string NombreDocumento, byte[] Documento, string Usuario) {
            return base.Channel.UpdateDocumentoServidor(IDDocumento, NombreDocumento, Documento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDocumentoServidorAsync(int IDDocumento, string NombreDocumento, byte[] Documento, string Usuario) {
            return base.Channel.UpdateDocumentoServidorAsync(IDDocumento, NombreDocumento, Documento, Usuario);
        }
        
        public bool DeleteDocumentoServidor(int IDDocumento, string Usuario) {
            return base.Channel.DeleteDocumentoServidor(IDDocumento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDocumentoServidorAsync(int IDDocumento, string Usuario) {
            return base.Channel.DeleteDocumentoServidorAsync(IDDocumento, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectEdificio(string Edificio, string Usuario) {
            return base.Channel.SelectEdificio(Edificio, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectEdificioAsync(string Edificio, string Usuario) {
            return base.Channel.SelectEdificioAsync(Edificio, Usuario);
        }
        
        public bool InsertEdificio(string Edificio, string Direccion, string Usuario) {
            return base.Channel.InsertEdificio(Edificio, Direccion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertEdificioAsync(string Edificio, string Direccion, string Usuario) {
            return base.Channel.InsertEdificioAsync(Edificio, Direccion, Usuario);
        }
        
        public bool UpdateEdificio(int ID, string Edificio, string Direccion, string Usuario) {
            return base.Channel.UpdateEdificio(ID, Edificio, Direccion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEdificioAsync(int ID, string Edificio, string Direccion, string Usuario) {
            return base.Channel.UpdateEdificioAsync(ID, Edificio, Direccion, Usuario);
        }
        
        public bool DeleteEdificio(int ID, string Usuario) {
            return base.Channel.DeleteEdificio(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEdificioAsync(int ID, string Usuario) {
            return base.Channel.DeleteEdificioAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectEthernet(string Servidor, string Usuario) {
            return base.Channel.SelectEthernet(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectEthernetAsync(string Servidor, string Usuario) {
            return base.Channel.SelectEthernetAsync(Servidor, Usuario);
        }
        
        public bool InsertEthernet(string DireccionIP, int IDServidor, string Usuario) {
            return base.Channel.InsertEthernet(DireccionIP, IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertEthernetAsync(string DireccionIP, int IDServidor, string Usuario) {
            return base.Channel.InsertEthernetAsync(DireccionIP, IDServidor, Usuario);
        }
        
        public bool UpdateEthernet(string DireccionIP, int IDServidor, string NewDireccionIP, string Usuario) {
            return base.Channel.UpdateEthernet(DireccionIP, IDServidor, NewDireccionIP, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEthernetAsync(string DireccionIP, int IDServidor, string NewDireccionIP, string Usuario) {
            return base.Channel.UpdateEthernetAsync(DireccionIP, IDServidor, NewDireccionIP, Usuario);
        }
        
        public bool DeleteEthernet(string DireccionIP, string Usuario) {
            return base.Channel.DeleteEthernet(DireccionIP, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEthernetAsync(string DireccionIP, string Usuario) {
            return base.Channel.DeleteEthernetAsync(DireccionIP, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectInstanciaAplicacionIDServer(int IDServidor, string UsuarioLog) {
            return base.Channel.SelectInstanciaAplicacionIDServer(IDServidor, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectInstanciaAplicacionIDServerAsync(int IDServidor, string UsuarioLog) {
            return base.Channel.SelectInstanciaAplicacionIDServerAsync(IDServidor, UsuarioLog);
        }
        
        public GCISApp.WSGCIS.Data SelectInstanciaAplicacion(string Instancia, string UsuarioLog) {
            return base.Channel.SelectInstanciaAplicacion(Instancia, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectInstanciaAplicacionAsync(string Instancia, string UsuarioLog) {
            return base.Channel.SelectInstanciaAplicacionAsync(Instancia, UsuarioLog);
        }
        
        public bool InsertInstanciaAplicacion(int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.InsertInstanciaAplicacion(IDServidor, IDAmbiente, IDAplicacion, Instancia, Usuario, Password, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> InsertInstanciaAplicacionAsync(int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.InsertInstanciaAplicacionAsync(IDServidor, IDAmbiente, IDAplicacion, Instancia, Usuario, Password, UsuarioLog);
        }
        
        public bool UpdateInstanciaAplicacion(int IDInstancia, int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.UpdateInstanciaAplicacion(IDInstancia, IDServidor, IDAmbiente, IDAplicacion, Instancia, Usuario, Password, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateInstanciaAplicacionAsync(int IDInstancia, int IDServidor, int IDAmbiente, int IDAplicacion, string Instancia, string Usuario, string Password, string UsuarioLog) {
            return base.Channel.UpdateInstanciaAplicacionAsync(IDInstancia, IDServidor, IDAmbiente, IDAplicacion, Instancia, Usuario, Password, UsuarioLog);
        }
        
        public bool DeleteInstanciaAplicacion(int IDInstancia, string UsuarioLog) {
            return base.Channel.DeleteInstanciaAplicacion(IDInstancia, UsuarioLog);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInstanciaAplicacionAsync(int IDInstancia, string UsuarioLog) {
            return base.Channel.DeleteInstanciaAplicacionAsync(IDInstancia, UsuarioLog);
        }
        
        public GCISApp.WSGCIS.Data SelectMarca(string Marca, string Usuario) {
            return base.Channel.SelectMarca(Marca, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectMarcaAsync(string Marca, string Usuario) {
            return base.Channel.SelectMarcaAsync(Marca, Usuario);
        }
        
        public bool InsertMarca(string Status, string Usuario) {
            return base.Channel.InsertMarca(Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertMarcaAsync(string Status, string Usuario) {
            return base.Channel.InsertMarcaAsync(Status, Usuario);
        }
        
        public bool UpdateMarca(int ID, string Status, string Usuario) {
            return base.Channel.UpdateMarca(ID, Status, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMarcaAsync(int ID, string Status, string Usuario) {
            return base.Channel.UpdateMarcaAsync(ID, Status, Usuario);
        }
        
        public bool DeleteMarca(int ID, string Usuario) {
            return base.Channel.DeleteMarca(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMarcaAsync(int ID, string Usuario) {
            return base.Channel.DeleteMarcaAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectModeloByMarca(string Marca, string Usuario) {
            return base.Channel.SelectModeloByMarca(Marca, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectModeloByMarcaAsync(string Marca, string Usuario) {
            return base.Channel.SelectModeloByMarcaAsync(Marca, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectModelo(string Modelo, string Usuario) {
            return base.Channel.SelectModelo(Modelo, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectModeloAsync(string Modelo, string Usuario) {
            return base.Channel.SelectModeloAsync(Modelo, Usuario);
        }
        
        public bool InsertModelo(int IDMarca, string Modelo, string Usuario) {
            return base.Channel.InsertModelo(IDMarca, Modelo, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertModeloAsync(int IDMarca, string Modelo, string Usuario) {
            return base.Channel.InsertModeloAsync(IDMarca, Modelo, Usuario);
        }
        
        public bool UpdateModelo(int ID, int IDMarca, string Modelo, string Usuario) {
            return base.Channel.UpdateModelo(ID, IDMarca, Modelo, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateModeloAsync(int ID, int IDMarca, string Modelo, string Usuario) {
            return base.Channel.UpdateModeloAsync(ID, IDMarca, Modelo, Usuario);
        }
        
        public bool DeleteModelo(int ID, string Usuario) {
            return base.Channel.DeleteModelo(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteModeloAsync(int ID, string Usuario) {
            return base.Channel.DeleteModeloAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectPlanMantenimiento(string NombreInstancia, string Usuario) {
            return base.Channel.SelectPlanMantenimiento(NombreInstancia, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPlanMantenimientoAsync(string NombreInstancia, string Usuario) {
            return base.Channel.SelectPlanMantenimientoAsync(NombreInstancia, Usuario);
        }
        
        public bool InsertPlanMantenimiento(int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.InsertPlanMantenimiento(IDInstancia, Nombre, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertPlanMantenimientoAsync(int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.InsertPlanMantenimientoAsync(IDInstancia, Nombre, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public bool UpdatePlanMantenimiento(int IDPlanMantenimiento, int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.UpdatePlanMantenimiento(IDPlanMantenimiento, IDInstancia, Nombre, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlanMantenimientoAsync(int IDPlanMantenimiento, int IDInstancia, string Nombre, string Descripcion, string DiaSemana, string Hora, string Usuario) {
            return base.Channel.UpdatePlanMantenimientoAsync(IDPlanMantenimiento, IDInstancia, Nombre, Descripcion, DiaSemana, Hora, Usuario);
        }
        
        public bool DeletePlanMantenimiento(int IDPlanMantenimiento, string Usuario) {
            return base.Channel.DeletePlanMantenimiento(IDPlanMantenimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlanMantenimientoAsync(int IDPlanMantenimiento, string Usuario) {
            return base.Channel.DeletePlanMantenimientoAsync(IDPlanMantenimiento, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectPoolBySan(string San, string Usuario) {
            return base.Channel.SelectPoolBySan(San, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPoolBySanAsync(string San, string Usuario) {
            return base.Channel.SelectPoolBySanAsync(San, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectPool(string Pool, string Usuario) {
            return base.Channel.SelectPool(Pool, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectPoolAsync(string Pool, string Usuario) {
            return base.Channel.SelectPoolAsync(Pool, Usuario);
        }
        
        public bool InsertPool(int IDSan, string Pool, string Descripcion, string Usuario) {
            return base.Channel.InsertPool(IDSan, Pool, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertPoolAsync(int IDSan, string Pool, string Descripcion, string Usuario) {
            return base.Channel.InsertPoolAsync(IDSan, Pool, Descripcion, Usuario);
        }
        
        public bool UpdatePool(int IDPool, int IDSan, string Pool, string Descripcion, string Usuario) {
            return base.Channel.UpdatePool(IDPool, IDSan, Pool, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePoolAsync(int IDPool, int IDSan, string Pool, string Descripcion, string Usuario) {
            return base.Channel.UpdatePoolAsync(IDPool, IDSan, Pool, Descripcion, Usuario);
        }
        
        public bool DeletePool(int IDPool, string Usuario) {
            return base.Channel.DeletePool(IDPool, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePoolAsync(int IDPool, string Usuario) {
            return base.Channel.DeletePoolAsync(IDPool, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectProcesador(string Like, string Usuario) {
            return base.Channel.SelectProcesador(Like, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectProcesadorAsync(string Like, string Usuario) {
            return base.Channel.SelectProcesadorAsync(Like, Usuario);
        }
        
        public bool InsertProcesador(int IDMarca, string Procesador, string Usuario) {
            return base.Channel.InsertProcesador(IDMarca, Procesador, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertProcesadorAsync(int IDMarca, string Procesador, string Usuario) {
            return base.Channel.InsertProcesadorAsync(IDMarca, Procesador, Usuario);
        }
        
        public bool UpdateProcesador(int ID, int IDMarca, string Procesador, string Usuario) {
            return base.Channel.UpdateProcesador(ID, IDMarca, Procesador, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProcesadorAsync(int ID, int IDMarca, string Procesador, string Usuario) {
            return base.Channel.UpdateProcesadorAsync(ID, IDMarca, Procesador, Usuario);
        }
        
        public bool DeleteProcesador(int ID, string Usuario) {
            return base.Channel.DeleteProcesador(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProcesadorAsync(int ID, string Usuario) {
            return base.Channel.DeleteProcesadorAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectProveedor(string NombreProveedor, string Usuario) {
            return base.Channel.SelectProveedor(NombreProveedor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectProveedorAsync(string NombreProveedor, string Usuario) {
            return base.Channel.SelectProveedorAsync(NombreProveedor, Usuario);
        }
        
        public bool InsertProveedor(string Proveedor, string Usuario) {
            return base.Channel.InsertProveedor(Proveedor, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertProveedorAsync(string Proveedor, string Usuario) {
            return base.Channel.InsertProveedorAsync(Proveedor, Usuario);
        }
        
        public bool UpdateProveedor(int ID, string Proveedor, string Usuario) {
            return base.Channel.UpdateProveedor(ID, Proveedor, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProveedorAsync(int ID, string Proveedor, string Usuario) {
            return base.Channel.UpdateProveedorAsync(ID, Proveedor, Usuario);
        }
        
        public bool DeleteProveedor(int ID, string Usuario) {
            return base.Channel.DeleteProveedor(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProveedorAsync(int ID, string Usuario) {
            return base.Channel.DeleteProveedorAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectRack(string Like, string Usuario) {
            return base.Channel.SelectRack(Like, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectRackAsync(string Like, string Usuario) {
            return base.Channel.SelectRackAsync(Like, Usuario);
        }
        
        public bool InsertRack(string Rack, string Descripcion, string Usuario) {
            return base.Channel.InsertRack(Rack, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRackAsync(string Rack, string Descripcion, string Usuario) {
            return base.Channel.InsertRackAsync(Rack, Descripcion, Usuario);
        }
        
        public bool UpdateRack(int ID, string Rack, string Descripcion, string Usuario) {
            return base.Channel.UpdateRack(ID, Rack, Descripcion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRackAsync(int ID, string Rack, string Descripcion, string Usuario) {
            return base.Channel.UpdateRackAsync(ID, Rack, Descripcion, Usuario);
        }
        
        public bool DeleteRack(int ID, string Usuario) {
            return base.Channel.DeleteRack(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRackAsync(int ID, string Usuario) {
            return base.Channel.DeleteRackAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectRedundancia(int IDServidor, string Usuario) {
            return base.Channel.SelectRedundancia(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectRedundanciaAsync(int IDServidor, string Usuario) {
            return base.Channel.SelectRedundanciaAsync(IDServidor, Usuario);
        }
        
        public bool InsertRedundancia(int IDServidor, int IDRedundancia, string Usuario) {
            return base.Channel.InsertRedundancia(IDServidor, IDRedundancia, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRedundanciaAsync(int IDServidor, int IDRedundancia, string Usuario) {
            return base.Channel.InsertRedundanciaAsync(IDServidor, IDRedundancia, Usuario);
        }
        
        public bool UpdateRedundancia(int IDServidor, int IDRedundancia, string Usuario) {
            return base.Channel.UpdateRedundancia(IDServidor, IDRedundancia, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRedundanciaAsync(int IDServidor, int IDRedundancia, string Usuario) {
            return base.Channel.UpdateRedundanciaAsync(IDServidor, IDRedundancia, Usuario);
        }
        
        public bool DeleteRedundancia(int IDServidor, int IDRedundancia, string Usuario) {
            return base.Channel.DeleteRedundancia(IDServidor, IDRedundancia, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRedundanciaAsync(int IDServidor, int IDRedundancia, string Usuario) {
            return base.Channel.DeleteRedundanciaAsync(IDServidor, IDRedundancia, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectSAN(string San, string Usuario) {
            return base.Channel.SelectSAN(San, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectSANAsync(string San, string Usuario) {
            return base.Channel.SelectSANAsync(San, Usuario);
        }
        
        public bool InsertSAN(string San, string Usuario) {
            return base.Channel.InsertSAN(San, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSANAsync(string San, string Usuario) {
            return base.Channel.InsertSANAsync(San, Usuario);
        }
        
        public bool UpdateSAN(int IDSan, string San, string Usuario) {
            return base.Channel.UpdateSAN(IDSan, San, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSANAsync(int IDSan, string San, string Usuario) {
            return base.Channel.UpdateSANAsync(IDSan, San, Usuario);
        }
        
        public bool DeleteSAN(int IDSan, string Usuario) {
            return base.Channel.DeleteSAN(IDSan, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSANAsync(int IDSan, string Usuario) {
            return base.Channel.DeleteSANAsync(IDSan, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidor4Redundancia(string Servidor, string Usuario) {
            return base.Channel.SelectServidor4Redundancia(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidor4RedundanciaAsync(string Servidor, string Usuario) {
            return base.Channel.SelectServidor4RedundanciaAsync(Servidor, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidor(string Servidor, string Usuario) {
            return base.Channel.SelectServidor(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorAsync(string Servidor, string Usuario) {
            return base.Channel.SelectServidorAsync(Servidor, Usuario);
        }
        
        public bool InsertServidor(int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario) {
            return base.Channel.InsertServidor(IDStatus, IDSistemaOperativo, IDAmbiente, IDTipo, Servidor, Descripcion, NoProcesadores, Ram, NoEthernet, TeamEthernet, FechaParches, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServidorAsync(int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario) {
            return base.Channel.InsertServidorAsync(IDStatus, IDSistemaOperativo, IDAmbiente, IDTipo, Servidor, Descripcion, NoProcesadores, Ram, NoEthernet, TeamEthernet, FechaParches, Usuario);
        }
        
        public bool UpdateServidor(int IDServidor, int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario) {
            return base.Channel.UpdateServidor(IDServidor, IDStatus, IDSistemaOperativo, IDAmbiente, IDTipo, Servidor, Descripcion, NoProcesadores, Ram, NoEthernet, TeamEthernet, FechaParches, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServidorAsync(int IDServidor, int IDStatus, int IDSistemaOperativo, int IDAmbiente, int IDTipo, string Servidor, string Descripcion, int NoProcesadores, int Ram, int NoEthernet, string TeamEthernet, System.DateTime FechaParches, string Usuario) {
            return base.Channel.UpdateServidorAsync(IDServidor, IDStatus, IDSistemaOperativo, IDAmbiente, IDTipo, Servidor, Descripcion, NoProcesadores, Ram, NoEthernet, TeamEthernet, FechaParches, Usuario);
        }
        
        public bool DeleteServidor(int IDServidor, string Usuario) {
            return base.Channel.DeleteServidor(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServidorAsync(int IDServidor, string Usuario) {
            return base.Channel.DeleteServidorAsync(IDServidor, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidorFisico(string Servidor, string Usuario) {
            return base.Channel.SelectServidorFisico(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorFisicoAsync(string Servidor, string Usuario) {
            return base.Channel.SelectServidorFisicoAsync(Servidor, Usuario);
        }
        
        public bool InsertServidorFisico(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario) {
            return base.Channel.InsertServidorFisico(IDServidor, IDModelo, IDEdificio, Procesador, ServiceTag, FuentesRedundantes, FechaFinGarantia, FechaCompra, IDRack, OU, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServidorFisicoAsync(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario) {
            return base.Channel.InsertServidorFisicoAsync(IDServidor, IDModelo, IDEdificio, Procesador, ServiceTag, FuentesRedundantes, FechaFinGarantia, FechaCompra, IDRack, OU, Usuario);
        }
        
        public bool UpdateservidorFisico(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario) {
            return base.Channel.UpdateservidorFisico(IDServidor, IDModelo, IDEdificio, Procesador, ServiceTag, FuentesRedundantes, FechaFinGarantia, FechaCompra, IDRack, OU, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateservidorFisicoAsync(int IDServidor, int IDModelo, int IDEdificio, string Procesador, string ServiceTag, string FuentesRedundantes, System.DateTime FechaFinGarantia, System.DateTime FechaCompra, int IDRack, string OU, string Usuario) {
            return base.Channel.UpdateservidorFisicoAsync(IDServidor, IDModelo, IDEdificio, Procesador, ServiceTag, FuentesRedundantes, FechaFinGarantia, FechaCompra, IDRack, OU, Usuario);
        }
        
        public bool DeleteServidorFisico(int IDServidor, string Usuario) {
            return base.Channel.DeleteServidorFisico(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServidorFisicoAsync(int IDServidor, string Usuario) {
            return base.Channel.DeleteServidorFisicoAsync(IDServidor, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidorSolucion(string Solucion, string Usuario) {
            return base.Channel.SelectServidorSolucion(Solucion, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorSolucionAsync(string Solucion, string Usuario) {
            return base.Channel.SelectServidorSolucionAsync(Solucion, Usuario);
        }
        
        public bool InsertServidorSolucion(int IDServidor, int IDSolucion, string Usuario) {
            return base.Channel.InsertServidorSolucion(IDServidor, IDSolucion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServidorSolucionAsync(int IDServidor, int IDSolucion, string Usuario) {
            return base.Channel.InsertServidorSolucionAsync(IDServidor, IDSolucion, Usuario);
        }
        
        public bool UpdateServidorSolucion(int IDServidor, int IDSolucion, string Usuario) {
            return base.Channel.UpdateServidorSolucion(IDServidor, IDSolucion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServidorSolucionAsync(int IDServidor, int IDSolucion, string Usuario) {
            return base.Channel.UpdateServidorSolucionAsync(IDServidor, IDSolucion, Usuario);
        }
        
        public bool DeleteServidorSolucion(int IDServidor, int IDSolucion, string Usuario) {
            return base.Channel.DeleteServidorSolucion(IDServidor, IDSolucion, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServidorSolucionAsync(int IDServidor, int IDSolucion, string Usuario) {
            return base.Channel.DeleteServidorSolucionAsync(IDServidor, IDSolucion, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidorUsuario(string Servidor, string Usuario) {
            return base.Channel.SelectServidorUsuario(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorUsuarioAsync(string Servidor, string Usuario) {
            return base.Channel.SelectServidorUsuarioAsync(Servidor, Usuario);
        }
        
        public bool InsertServidorUsuario(int IDServidor, int IDUsuario, string Usuario) {
            return base.Channel.InsertServidorUsuario(IDServidor, IDUsuario, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServidorUsuarioAsync(int IDServidor, int IDUsuario, string Usuario) {
            return base.Channel.InsertServidorUsuarioAsync(IDServidor, IDUsuario, Usuario);
        }
        
        public bool UpdateServidorUsuario(int IDServidor, int IDUsuario, string Usuario) {
            return base.Channel.UpdateServidorUsuario(IDServidor, IDUsuario, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServidorUsuarioAsync(int IDServidor, int IDUsuario, string Usuario) {
            return base.Channel.UpdateServidorUsuarioAsync(IDServidor, IDUsuario, Usuario);
        }
        
        public bool DeleteServidorUsuario(int IDServidor, int IDUsuario, string Usuario) {
            return base.Channel.DeleteServidorUsuario(IDServidor, IDUsuario, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServidorUsuarioAsync(int IDServidor, int IDUsuario, string Usuario) {
            return base.Channel.DeleteServidorUsuarioAsync(IDServidor, IDUsuario, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidorVirtual(string Servidor, string Usuario) {
            return base.Channel.SelectServidorVirtual(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorVirtualAsync(string Servidor, string Usuario) {
            return base.Channel.SelectServidorVirtualAsync(Servidor, Usuario);
        }
        
        public bool InsertServidorVirtual(int IDServidor, int IDCluster, string Usuario) {
            return base.Channel.InsertServidorVirtual(IDServidor, IDCluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServidorVirtualAsync(int IDServidor, int IDCluster, string Usuario) {
            return base.Channel.InsertServidorVirtualAsync(IDServidor, IDCluster, Usuario);
        }
        
        public bool UpdateServidorVirtual(int IDServidor, int IDCluster, string Usuario) {
            return base.Channel.UpdateServidorVirtual(IDServidor, IDCluster, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServidorVirtualAsync(int IDServidor, int IDCluster, string Usuario) {
            return base.Channel.UpdateServidorVirtualAsync(IDServidor, IDCluster, Usuario);
        }
        
        public bool DeleteServidorVirtual(int IDServidor, string Usuario) {
            return base.Channel.DeleteServidorVirtual(IDServidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServidorVirtualAsync(int IDServidor, string Usuario) {
            return base.Channel.DeleteServidorVirtualAsync(IDServidor, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectServidorWebservice(string Servidor, string Usuario) {
            return base.Channel.SelectServidorWebservice(Servidor, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectServidorWebserviceAsync(string Servidor, string Usuario) {
            return base.Channel.SelectServidorWebserviceAsync(Servidor, Usuario);
        }
        
        public bool InsertServidorWebservice(int IDServidor, int IDWebservice, string Usuario) {
            return base.Channel.InsertServidorWebservice(IDServidor, IDWebservice, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertServidorWebserviceAsync(int IDServidor, int IDWebservice, string Usuario) {
            return base.Channel.InsertServidorWebserviceAsync(IDServidor, IDWebservice, Usuario);
        }
        
        public bool UpdateServidorWebservice(int IDServidor, int IDWebservice, string Usuario) {
            return base.Channel.UpdateServidorWebservice(IDServidor, IDWebservice, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateServidorWebserviceAsync(int IDServidor, int IDWebservice, string Usuario) {
            return base.Channel.UpdateServidorWebserviceAsync(IDServidor, IDWebservice, Usuario);
        }
        
        public bool DeleteServidorWebservice(int IDServidor, int IDWebservice, string Usuario) {
            return base.Channel.DeleteServidorWebservice(IDServidor, IDWebservice, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServidorWebserviceAsync(int IDServidor, int IDWebservice, string Usuario) {
            return base.Channel.DeleteServidorWebserviceAsync(IDServidor, IDWebservice, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectSistemaOperativo(int Proveedor, string SistemaOperativo, string Usuario) {
            return base.Channel.SelectSistemaOperativo(Proveedor, SistemaOperativo, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectSistemaOperativoAsync(int Proveedor, string SistemaOperativo, string Usuario) {
            return base.Channel.SelectSistemaOperativoAsync(Proveedor, SistemaOperativo, Usuario);
        }
        
        public bool InsertSistemaOperativo(string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.InsertSistemaOperativo(SistemaOperativo, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSistemaOperativoAsync(string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.InsertSistemaOperativoAsync(SistemaOperativo, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public bool UpdateSistemaOperativo(int ID, string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.UpdateSistemaOperativo(ID, SistemaOperativo, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSistemaOperativoAsync(int ID, string SistemaOperativo, string Version, string Fabricante, string Licencia, int Proveedor, System.DateTime FechaVencimiento, string Usuario) {
            return base.Channel.UpdateSistemaOperativoAsync(ID, SistemaOperativo, Version, Fabricante, Licencia, Proveedor, FechaVencimiento, Usuario);
        }
        
        public bool DeleteSistemaOperativo(int ID, string Usuario) {
            return base.Channel.DeleteSistemaOperativo(ID, Usuario);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSistemaOperativoAsync(int ID, string Usuario) {
            return base.Channel.DeleteSistemaOperativoAsync(ID, Usuario);
        }
        
        public GCISApp.WSGCIS.Data SelectSolucion(string Solucion, string Usuario) {
            return base.Channel.SelectSolucion(Solucion, Usuario);
        }
        
        public System.Threading.Tasks.Task<GCISApp.WSGCIS.Data> SelectSolucionAsync(string Solucion, string Usuario) {
            return base.Channel.SelectSolucionAsync(Solucion, Usuario);
        }
    }
}
